#!/usr/bin/env bash

# Script to build the podman-build-toolbox image.
# Assumes this script is run after the 'toolbx' stow package has been stowed,
# and the Containerfile is located in $HOME/.local/share/toolbx/containers/podman-build/.

set -e # Exit immediately if a command exits with a non-zero status.
set -u # Treat unset variables as an error when substituting.
set -o pipefail # Return value of a pipeline is the value of the last command to exit with a non-zero status.

# Define paths based on $HOME, expecting files in their stowed locations.
CONTAINERFILE_CONTEXT_DIR="${HOME}/.local/share/toolbx/containers/podman-build"
CONTAINERFILE_PATH="${CONTAINERFILE_CONTEXT_DIR}/Containerfile"
IMAGE_TAG="podman-build-toolbox"

# Check if Containerfile exists
if [ ! -f "${CONTAINERFILE_PATH}" ]; then
    echo "Error: Containerfile not found at ${CONTAINERFILE_PATH}"
    echo "Please ensure your 'toolbx' stow package has been stowed correctly to this location."
    # SCRIPT_REAL_PATH can show where the script itself is (symlink source in your dotfiles)
    SCRIPT_REAL_PATH=$(realpath "$0")
    echo "Build script is located at (source): ${SCRIPT_REAL_PATH}"
    exit 1
fi

echo "Building image '${IMAGE_TAG}'..."
echo "Context directory: ${CONTAINERFILE_CONTEXT_DIR}"
echo "Containerfile: ${CONTAINERFILE_PATH}"

# Build the image using podman.
# The context for the build is the directory containing the Containerfile.
if podman build -t "${IMAGE_TAG}" -f "${CONTAINERFILE_PATH}" "${CONTAINERFILE_CONTEXT_DIR}"; then
    echo "Successfully built '${IMAGE_TAG}'."
else
    echo "Error: Failed to build '${IMAGE_TAG}'."
    exit 1
fi

exit 0
