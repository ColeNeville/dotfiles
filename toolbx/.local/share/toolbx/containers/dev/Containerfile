# Development Toolbox Container
# 
# This Containerfile creates a comprehensive development environment using Fedora Toolbox.
# It includes utilities, programming languages, package managers, and development tools
# needed for modern software development workflows.

FROM registry.fedoraproject.org/fedora-toolbox:40

# =============================================================================
# SYSTEM UTILITIES
# =============================================================================
# Install essential development utilities and build tools:
# - direnv: Directory-based environment variable management
# - gcc: GNU Compiler Collection for C/C++
# - git: Version control system
# - htop: Interactive process viewer
# - just: Command runner (alternative to make for simple tasks)
# - make: Build automation tool
# - opentofu: Open-source Terraform alternative for infrastructure as code
# - stow: Symlink farm manager for dotfiles management
RUN dnf update -y && \
  dnf install -y \
  direnv \
  gcc \
  git \
  htop \
  just \
  make \
  opentofu \
  stow && \
  dnf clean all

# =============================================================================
# PROGRAMMING LANGUAGES & PACKAGE MANAGERS
# =============================================================================
# Install multiple programming languages and their associated package managers
# to support polyglot development environments:
# - Python ecosystem: python3, pip, virtualenv
# - JavaScript/Node.js ecosystem: nodejs with npm
# - Rust ecosystem: rust compiler and cargo package manager
# - Go programming language: golang compiler and tools
# - Lua ecosystem: luarocks package manager
# - Ruby ecosystem: ruby-devel, rubygems, bundler
# - PHP ecosystem: composer dependency manager, php interpreter
# - Julia: scientific computing language
RUN dnf update -y && \
  dnf install -y \
  python3 \
  python3-pip \
  python3-virtualenv \
  nodejs \
  rust \
  cargo \
  golang \
  luarocks \
  ruby-devel \
  rubygems \
  rubygem-bundler \
  composer \
  php \
  julia && \
  dnf clean all

# =============================================================================
# DEVELOPER UTILITIES
# =============================================================================
# Install additional tools specifically for development workflows:
# - chromium: Web browser for testing and development
# - ripgrep: Fast text search tool (rg command)
RUN dnf update -y && \
  dnf install -y \
  chromium \
  ripgrep && \
  dnf clean all

RUN dnf update -y && \
  dnf install -y \
  podman-docker \
  podman-remote && \
  dnf clean all

RUN mv /usr/bin/podman /usr/bin/podman-local && \
  ln -s /usr/bin/podman-remote /usr/bin/podman

# =============================================================================
# PYTHON PACKAGES
# =============================================================================
# Install Python packages for AI-assisted development and automation:
# - aider-chat[chat]: AI pair programming tool
# - ansible: Infrastructure automation and configuration management
# - playwright: Browser automation and testing (optional dependency for aider required for web scraping)
RUN pip install --no-cache-dir \
  aider-chat[chat] \
  ansible \
  playwright

# =============================================================================
# NEOVIM INSTALLATION
# =============================================================================
# Install the latest stable Neovim from GitHub releases
# Using binary installation to get newer version than distribution packages
WORKDIR /tmp
RUN wget -q https://github.com/neovim/neovim/releases/download/v0.11.1/nvim-linux-x86_64.tar.gz && \
  tar -xzf /tmp/nvim-linux-x86_64.tar.gz -C /opt && \
  rm -f /tmp/nvim*

RUN mkdir -p /opt/bin
COPY nvim /opt/bin
RUN chmod +x /opt/bin/nvim

# Add Neovim to PATH so it's available system-wide
ENV PATH="/opt/bin:${PATH}"
